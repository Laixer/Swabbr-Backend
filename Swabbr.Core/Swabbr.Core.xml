<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Swabbr.Core</name>
    </assembly>
    <members>
        <member name="T:Swabbr.Core.Configuration.LogicAppsConfiguration">
            <summary>
            Contains configuration values for our backend logic apps.
            TODO This shouldn't be in the core - it's implementation specific.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Configuration.SwabbrConfiguration">
            <summary>
            Contains <see cref="N:Swabbr"/> configuration parameters.
            TODO <see cref="T:System.UInt32"/>?
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.ReactionLengthMaxInSeconds">
            <summary>
            Maximum reaction length.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogLengthMinSeconds">
            <summary>
            Minimum vlog length.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogLengthMaxSeconds">
            <summary>
            Maximum vlog length.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogRequestTimeoutMinutes">
            <summary>
            Timeout in minutes before a vlog record request times out.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.DailyVlogRequestLimit">
            <summary>
            Maximum daily vlog request count.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogRequestStartTimeMinutes">
            <summary>
            Minute of the day that our vlog requests start.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogRequestEndTimeMinutes">
            <summary>
            Minute of the day that our vlog requests end.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Configuration.SwabbrConfiguration.UserConnectTimeoutSeconds">
            <summary>
            Timeout in seconds that the user has to connect to the livestream after
            notifying the backend that he or she will start streaming.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.EntityBase`1">
            <summary>
            Used as a base class for all our entities.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.EntityBase`1.Id">
            <summary>
            Internal entity unique identifier.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.FollowRequest">
            <summary>
            Represents an active follow request between two users.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Entities.FollowRequest.#ctor">
            <summary>
            Constructor to ensure <see cref="T:Swabbr.Core.Types.FollowRequestId"/> initialization.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.FollowRequest.RequesterId">
            <summary>
            Id of the requesting user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.FollowRequest.ReceiverId">
            <summary>
            Id of the receiving user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.FollowRequest.FollowRequestStatus">
            <summary>
            Current status of the follow request.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.FollowRequest.TimeCreated">
            <summary>
            Timestamp of when the request was initiated.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.Livestream">
            <summary>
            Represents a livestream entity.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.ExternalId">
            <summary>
            External unique identifier for the service on which this livestream is hosted.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.UserId">
            <summary>
            Unique identifier of the user this livestream temporarily belongs to.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.Name">
            <summary>
            Name of the livestream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.BroadcastLocation">
            <summary>
            Broadcasting location of the livestream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.IsActive">
            <summary>
            Indicates whether the livestream is currently active or not.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.CreateDate">
            <summary>
            Creation date.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.UpdateDate">
            <summary>
            Update date.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.LivestreamState">
            <summary>
            Indicates the current status of the livestream on our external platform.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Livestream.UserTriggerMinute">
            <summary>
            Represents the trigger minute at which this livestream was created.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.NotificationRegistration">
            <summary>
            Represents a single registration event for a device to receive notifications.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.NotificationRegistration.ExternalId">
            <summary>
            External registration id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.NotificationRegistration.UserId">
            <summary>
            Id of the user this registration is bound to.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.NotificationRegistration.Handle">
            <summary>
            PNS handle of the device
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.NotificationRegistration.PushNotificationPlatform">
            <summary>
            Indicates which platform is being used for sending push notifications.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.Reaction">
            <summary>
            Represents a video reaction to a vlog.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.UserId">
            <summary>
            Id of the user by whom this reaction was created.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.TargetVlogId">
            <summary>
            Id of the vlog the reaction responds to.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.Duration">
            <summary>
            Duration of the video.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.CreateDate">
            <summary>
            The moment at which the reaction was posted.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.IsPrivate">
            <summary>
            Indicates whether this reaction is public or private.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.LengthInSeconds">
            <summary>
            Represents the length in seconds for this reaction.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Reaction.ReactionState">
            <summary>
            Indicates the state of this reaction.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.ReactionWithDownload">
            <summary>
            <see cref="T:Swabbr.Core.Entities.Reaction"/> with extended download URI's.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.SwabbrUser">
            <summary>
            Represents a single user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.FirstName">
            <summary>
            First name of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.LastName">
            <summary>
            Surname of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Email">
            <summary>
            Email address.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Gender">
            <summary>
            Selected gender of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Country">
            <summary>
            Selected country.
            TODO Enum or something?
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.BirthDate">
            <summary>
            Date of birth for the given user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Timezone">
            <summary>
            The specified timezone of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Nickname">
            <summary>
            Nickname to display for the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.ProfileImageBase64Encoded">
            <summary>
            Base64 encoded string containing the uploaded profile image of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Longitude">
            <summary>
            Angular longitude coordinate.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.Latitude">
            <summary>
            Angular latitude coordinate.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.IsPrivate">
            <summary>
            Indicates whether the profile of the user is publicly visible to other users.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.DailyVlogRequestLimit">
            <summary>
            The maximum amount of times the user should be reminded to record a vlog through push notifications.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUser.FollowMode">
            <summary>
            Determines how follow requests are processed for the user.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.SwabbrUserMinified">
            <summary>
            Contains only the id, the vlog request limit and the timezone
            of a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.SwabbrUserWithStats">
            <summary>
            <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> including statistics.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUserWithStats.TotalFollowers">
            <summary>
            Total amount of users following this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUserWithStats.TotalFollowing">
            <summary>
            Total amount of users that this user follows.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.SwabbrUserWithStats.TotalVlogs">
            <summary>
            Total amount of vlogs that this user has uploaded.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.UserSettings">
            <summary>
            Personal settings and preferences for a user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserSettings.UserId">
            <summary>
            Id of the user these settings belong to.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserSettings.DailyVlogRequestLimit">
            <summary>
            The maximum amount of times the user should be reminded to record a vlog through push notifications.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserSettings.FollowMode">
            <summary>
            Determines how follow requests are processed for the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserSettings.IsPrivate">
            <summary>
            Setting that determines if the user account is private.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.UserStatistics">
            <summary>
            Contains statistics for a single <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalLikes">
            <summary>
            The total amount of accumulated likes for the vlogs of this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalFollowers">
            <summary>
            The total amount of users that are following this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalFollowing">
            <summary>
            The total amount of users this user is following.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalReactionsGiven">
            <summary>
            The total amount of placed reactions by this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalReactionsReceived">
            <summary>
            The total amount of received reactions by this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalVlogs">
            <summary>
            The total amount of placed vlogs by this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.UserStatistics.TotalViews">
            <summary>
            The total amount of accumulated views for the vlogs this user owns.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.Vlog">
            <summary>
            A vlog created by a user.
            TODO This needs some work
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Vlog.UserId">
            <summary>
            Id of the user who created the vlog.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Vlog.LivestreamId">
            <summary>
            References the <see cref="T:Swabbr.Core.Entities.Livestream"/> on which this vlog was created.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Vlog.IsPrivate">
            <summary>
            Indicates if the vlog should be publicly available to other users.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Vlog.StartDate">
            <summary>
            The date at which the recording of the vlog started.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.Vlog.Views">
            <summary>
            Total amount of views for this vlog.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Entities.VlogLike">
            <summary>
            Represents a like (love-it) given to a vlog.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Entities.VlogLike.#ctor">
            <summary>
            TODO This seems like a beunfix.
            When we parse this object into it's Id object through UserId and VlogId,
            the Id object is still null.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Entities.VlogLike.TimeCreated">
            <summary>
            The time at which the user liked the vlog.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.FollowMode">
            <summary>
            Enum representation of the follow mode setting for the profile of a <see cref="!:UserItem"/>.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowMode.Manual">
            <summary>
            Manually accept or deny incoming follow requests.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowMode.AcceptAll">
            <summary>
            Automatically accept all incoming follow requests.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowMode.DeclineAll">
            <summary>
            Automatically deny all incoming follow requests.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.FollowRequestStatus">
            <summary>
            Enum that represents the status of an active <see cref="!:FollowRequest"/> between two users.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowRequestStatus.Pending">
            <summary>
            The follow request is waiting for approval.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowRequestStatus.Accepted">
            <summary>
            The follow request has been accepted.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.FollowRequestStatus.Declined">
            <summary>
            The follow request has been declined.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.Gender">
            <summary>
            Enum for the gender of a <see cref="!:UserItem"/>.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.Gender.Female">
            <summary>
            Female gender.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.Gender.Male">
            <summary>
            Male gender.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.Gender.Unspecified">
            <summary>
            Other or unknown gender.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.LivestreamState">
            <summary>
            Indicates the status of a <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.UserNoResponseTimeout">
            <summary>
            The user never responded.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.CreatedInternal">
            <summary>
            The livestream is created, but that's all.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.Created">
            <summary>
            The livestream is created, but that's all.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.PendingUser">
            <summary>
            The user was notified and we are waiting for the user to respond.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.Live">
            <summary>
            The user is streaming.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.PendingClosure">
            <summary>
            The user stopped streaming and we are waiting for the external service
            to close the stream.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.Closed">
            <summary>
            The stream is closed.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.PendingUserConnect">
            <summary>
            The user has received the credentials and we are waiting for first connect.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.LivestreamState.UserNeverConnectedTimeout">
            <summary>
            The user has received the credentials and we are waiting for first connect.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.PushNotificationPlatform">
            <summary>
            Represents the supported mobile platform services for push notifications.
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.PushNotificationPlatform.APNS">
            <summary>
            Apple Push Notification Service (iOS).
            </summary>
        </member>
        <member name="F:Swabbr.Core.Enums.PushNotificationPlatform.FCM">
            <summary>
            Firebase Cloud Messaging (Android).
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.ReactionState">
            <summary>
            Represents the processing state of a reaction.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Enums.VlogState">
            <summary>
            Indicates the state of a request.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.EntityNotFoundException">
            <summary>
            Exception indicating we could not find a given entity in our data store.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.ExternalErrorException">
            <summary>
            <see cref="T:System.Exception"/> indicating an external service threw an exception.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.InvalidProfileImageStringException">
            <summary>
            Indicates an invalid profile image base64 encoded string.
            TODO Too specific
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.LivestreamStateException">
            <summary>
            Indicates the <see cref="T:Swabbr.Core.Entities.Livestream"/> status is invalid for
            a given operation.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.MultipleEntitiesFoundException">
            <summary>
            Indicates we found more than one <see cref="T:Swabbr.Core.Entities.EntityBase`1"/> 
            in our data store, where we should only find one.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.NicknameExistsException">
            <summary>
            Indicates a given <see cref="P:Swabbr.Core.Entities.SwabbrUser.Nickname"/> already exists.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.NoLivestreamAvailableException">
            <summary>
            Indicates we have no available <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.NotAllowedException">
            <summary>
            <see cref="T:System.Exception"/> indicating we are not allowed to perform a certain
            action in our backend.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.OperationAlreadyExecutedException">
            <summary>
            <see cref="T:System.Exception"/> indicating that some operation was already performed
            before, thus the expected output state is already the current state.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.OutsideVlogRequestPeriodException">
            <summary>
            Indicates a given operation occured outside of the permitted vlog request period.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.ReactionStateException">
            <summary>
            Indicates the <see cref="T:Swabbr.Core.Entities.Reaction"/> status is invalid for
            a given operation.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.UserAlreadyInLivestreamCycleException">
            <summary>
            Represents the situation where a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> is
            in a livestreaming cycle when a second one is started.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.UserNotFoundException">
            <summary>
            Indicates that a user was not found in our backend.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Exceptions.UserNotOwnerException">
            <summary>
            Indicates a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> does not own a given
            <see cref="T:Swabbr.Core.Entities.EntityBase`1"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Factories.HttpClientFactory">
            <summary>
            Generates <see cref="T:System.Net.Http.HttpClient"/>s for us.
            TODO Is this safe? Maybe using singleton of asp?
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Clients.ILivestreamingClient">
            <summary>
            Contains functionality for managing livestreams.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.CreateNewStreamAsync(System.String)">
            <summary>
            Create a new livestream.
            </summary>
            <param name="name">Name of the livestream.</param>
            <param name="userId">Id of the user this stream should belong to.</param>
            <returns>Connection details for broadcasting the stream.</returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.GetStreamConnectionAsync(System.String)">
            <summary>
            Fetches the connection details for an existing stream
            </summary>
            <returns>Connection details for broadcasting the stream.</returns>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.ReserveLiveStreamForUserAsync(System.Guid)">
            <summary>
            Returns connection details for an available livestream from the pool, creates a new
            livestream if none are available.
            </summary>
            <param name="userId">Id of the user to reserve the livestream for.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.DeleteLivestreamAsync(System.String)">
            <summary>
            Delete a new livestream.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.StartLivestreamAsync(System.String)">
            <summary>
            Start a stopped livestream.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.StopLivestreamAsync(System.String)">
            <summary>
            Stop a started livestream.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.GetStreamPlaybackAsync(System.String)">
            <summary>
            Fetch the playback of a livestream.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.GetThumbnailUrlAsync(System.String)">
            <summary>
            Fetches the thumbnail URL of the given stream.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Clients.ILivestreamingClient.GetRecordingsAsync(System.String)">
            <summary>
            Synchronize the recordings from a livestream to a vlog.
            </summary>
            <param name="livestreamId">Id of the livestream.</param>
            <param name="vlogId">Id of the vlog.</param>
            <returns></returns>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Clients.INotificationClient">
            <summary>
            Contract for communicating with some external notification provider. This
            item has no knowledge of our internal data store.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Notifications.INotificationBuilder">
            <summary>
            Contract for creationg <see cref="T:Swabbr.Core.Notifications.SwabbrNotification"/> objects.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Notifications.INotificationJsonExtractor">
            <summary>
            Contains functionality to generate platform specific JSON template objects
            based on a <see cref="T:Swabbr.Core.Notifications.SwabbrNotification"/>. We need this  because each 
            <see cref="T:Swabbr.Core.Enums.PushNotificationPlatform"/> sends its data payload in a different 
            way.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.ICudFunctionality`2">
            <summary>
            Contract for ipmlementing create, update and delete functionality for
            a given <see cref="!:TEntity"/> entity type.
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository">
            <summary>
            Contract for the <see cref="T:Swabbr.Core.Entities.FollowRequest"/> repository.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.ExistsAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Returns whether a follow relationship from the receiver to the requester exists.
            </summary>
            <param name="receiverId">Unique identifier of the receiving user.</param>
            <param name="requesterId">Unique identifier of the requesting user.</param>
            <returns></returns>
            TODO THOMAS I suspect that this exists to battle the double-follow-request race conditions. These should
            never be a problem as long as the follow request processsing pipeline is transactional. --> postgresql
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.GetIncomingForUserAsync(System.Guid)">
            <summary>
            Returns all follow requests targeted to a specific user.
            </summary>
            <param name="userId">Unique identifier of the user that received the requests.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.GetOutgoingForUserAsync(System.Guid)">
            <summary>
            Returns all outgoing follow requests from a specific user.
            </summary>
            <param name="userId">Unique identifier of the user that sent out the requests.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.GetFollowerCountAsync(System.Guid)">
            <summary>
            Returns the amount of users that follow the specified user.
            </summary>
            <param name="userId">Unique identifier of the user that is being followed.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.GetFollowingCountAsync(System.Guid)">
            <summary>
            Returns the amount of users that the specified user is following.
            </summary>
            <param name="userId">
            Unique identifier of the user to check the amount of followers for.
            </param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository.UpdateStatusAsync(Swabbr.Core.Types.FollowRequestId,Swabbr.Core.Enums.FollowRequestStatus)">
            <summary>
            Updates the status for a single <see cref="T:Swabbr.Core.Entities.FollowRequest"/> to the 
            specified <paramref name="status"/>.
            </summary>
            <param name="id">Internal <see cref="T:Swabbr.Core.Entities.FollowRequest"/> id</param>
            <param name="status"><see cref="T:Swabbr.Core.Enums.FollowRequestStatus"/></param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.ILivestreamRepository">
            <summary>
            Repository for <see cref="T:Swabbr.Core.Entities.Livestream"/> entities.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.INotificationRegistrationRepository">
            <summary>
            Contract for a <see cref="T:Swabbr.Core.Entities.NotificationRegistration"/> repository.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.IReactionRepository">
            <summary>
            Contract for a <see cref="T:Swabbr.Core.Entities.Reaction"/> repository.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Swabbr.Core.Interfaces.Repositories.IRepository`2" -->
        <member name="T:Swabbr.Core.Interfaces.Repositories.IUserRepository">
            <summary>
            Repository for <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> entities.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.IUserWithStatsRepository">
            <summary>
            Contract for a <see cref="T:Swabbr.Core.Entities.SwabbrUserWithStats"/> repository.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.IVlogLikeRepository">
            <summary>
            Contract for a <see cref="T:Swabbr.Core.Entities.VlogLike"/> repository.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Repositories.IVlogRepository">
            <summary>
            Repository for Vlog entities.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IVlogRepository.ExistsAsync(System.Guid)">
            <summary>
            Returns whether the vlog with the specified id exists.
            </summary>
            <param name="vlogId">Unique identifier of the vlog.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IVlogRepository.ExistsForLivestreamAsync(System.Guid)">
            <summary>
            Checks to see if there is a <see cref="T:Swabbr.Core.Entities.Vlog"/> that belongs to a
            specified <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="!:true"/> if exists</returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IVlogRepository.GetFeaturedVlogsAsync">
            <summary>
            Returns a collection of featured vlogs.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IVlogRepository.GetVlogCountForUserAsync(System.Guid)">
            <summary>
            Returns the amount of vlogs that a user has created.
            </summary>
            <param name="userId">Unique identifier of the user to check the amount of vlogs for.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Repositories.IVlogRepository.GetVlogsFromUserAsync(System.Guid)">
            <summary>
            Returns a collection of vlogs that are owned by the specified user.
            </summary>
            <param name="userId">Unique identifier of the user and owner of the vlogs.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Swabbr.Core.Interfaces.Services.IDeviceRegistrationService" -->
        <member name="T:Swabbr.Core.Interfaces.Services.IFollowRequestService">
            <summary>
            Contains functionality for processing <see cref="T:Swabbr.Core.Entities.FollowRequest"/> entities.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.SendAsync(System.Guid,System.Guid)">
            <summary>
            Send a follow request from a requesting user to a receiving user.
            </summary>
            <param name="requesterId">Id of the user that sent out the request.</param>
            <param name="receiverId">Id of the user that should receive the request.</param>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.AcceptAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Accept an existing follow request.
            </summary>
            <param name="followRequestId"></param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.DeclineAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Decline an existing follow request.
            </summary>
            <param name="followRequestId"></param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.CancelAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Cancel an existing follow request.
            </summary>
            <param name="followRequestId"></param>
            <param name="requesterId">The requesting <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.UnfollowAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Unfollows a requester from a receiver.
            TODO Do we need functionality for the other way around? As in, kicking your subscribers?
            </summary>
            <param name="requesterId">Requesting user id</param>
            <param name="receiverId">Receiving user id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Returns a single follow request entity from the id of the requester to the id of the receiver.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetStatusAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Gets the <see cref="T:Swabbr.Core.Enums.FollowRequestStatus"/> for a given <see cref="T:Swabbr.Core.Entities.FollowRequest"/>
            between two users.
            </summary>
            <param name="requesterId">Internal requester id</param>
            <param name="receiverId">Internal receiver id</param>
            <returns><see cref="T:Swabbr.Core.Enums.FollowRequestStatus"/></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetPendingIncomingForUserAsync(System.Guid)">
            <summary>
            Returns all pending incoming follow requests for a specific user.
            </summary>
            <param name="userId">Unique identifier of the user that received the requests.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetPendingOutgoingForUserAsync(System.Guid)">
            <summary>
            Returns all pending outgoing follow requests from a specific user.
            </summary>
            <param name="userId">Unique identifier of the user that sent out the requests.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetFollowerCountAsync(System.Guid)">
            <summary>
            Returns the amount of users that follow the specified user.
            </summary>
            <param name="userId">Unique identifier of the user that is being followed.</param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IFollowRequestService.GetFollowingCountAsync(System.Guid)">
            <summary>
            Returns the amount of users that the specified user is following.
            </summary>
            <param name="userId">
            Unique identifier of the user to check the amount of followers for.
            </param>
            <returns></returns>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IHashDistributionService">
            <summary>
            Contract for managing hash distributions for timed triggers.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.ILivestreamPoolService">
            <summary>
            Contains functionality for managing a <see cref="T:Swabbr.Core.Entities.Livestream"/> resource
            pool.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.ILivestreamService">
            <summary>
            Handles all functionality for our <see cref="T:Swabbr.Core.Entities.Livestream"/> objects.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.INotificationService">
            <summary>
            A contract for a service to handle everything regarding notification.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IPlaybackService">
            <summary>
            Contract for handling everything that is related to video playback.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IReactionService">
            <summary>
            Contract for a service that handles everything related to <see cref="T:Swabbr.Core.Entities.Reaction"/> entities.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IReactionService.GetNewUploadUriAsync(System.Guid,System.Guid)">
            <summary>
            Gets a new uploading uri for a <see cref="T:Swabbr.Core.Entities.Reaction"/> upload.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="reactionId">Internal <see cref="T:Swabbr.Core.Entities.Reaction"/> id</param>
            <returns><see cref="T:System.Uri"/></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IReactionService.OnFinishedUploadingReactionAsync(System.Guid)">
            <summary>
            Called when a <see cref="T:Swabbr.Core.Entities.Reaction"/> is uploaded.
            </summary>
            <param name="reactionId">Internal <see cref="T:Swabbr.Core.Entities.Reaction"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Interfaces.Services.IReactionService.PostReactionAsync(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Called when we want to upload a reaction.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="targetVlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <param name="isPrivate">Indicates vlog private or not</param>
            <returns><see cref="T:Swabbr.Core.Types.ReactionUploadWrapper"/></returns>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IStorageService">
            <summary>
            Contract for managing storage.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IUserService">
            <summary>
            Contract for <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> related operations.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IUserStreamingHandlingService">
            <summary>
            Contract for managing user stream requests.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IUserWithStatsService">
            <summary>
            Contract for <see cref="T:Swabbr.Core.Entities.SwabbrUserWithStats"/> related operations.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IVlogService">
            <summary>
            Service for processing <see cref="T:Swabbr.Core.Entities.Vlog"/> and <see cref="T:Swabbr.Core.Entities.VlogLike"/> 
            related requests.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Interfaces.Services.IVlogTriggerService">
            <summary>
            Contract for handling vlog trigger requests.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.NotificationJsonBase">
            <summary>
            Abstract base class for all notification json functionalitiy.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileLive">
            <summary>
            JSON wrapper for a notification of a currently live profile.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileLive.LiveUserId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id of the person that is live.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileLive.LiveLivestreamId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileLive.LiveVlogId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileVlogPosted">
            <summary>
            JSON wrapper for notifying about a posted <see cref="T:Swabbr.Core.Entities.Vlog"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileVlogPosted.VlogId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileVlogPosted.VlogOwnerUserId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id of the person that owns
            the vlog.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersJsonBase">
            <summary>
            Abstract base class for creating operation specific JSON wrappers.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog">
            <summary>
            Contains parameters we need to be able to start streaming to a livestream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog.RequestMoment">
            <summary>
            Moment when the request was sent.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog.RequestTimeout">
            <summary>
            Indicates how long the request is valid.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog.LivestreamId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog.VlogId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersVlogGainedLike">
            <summary>
            Json wrapper for a <see cref="F:Swabbr.Core.Notifications.NotificationAction.VlogGainedLikes"/> push.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.JsonWrappers.ParametersVlogNewReaction">
            <summary>
            Parameters for a <see cref="F:Swabbr.Core.Notifications.NotificationAction.VlogNewReaction"/> request.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationAction">
            <summary>
            Enum that represents all possible notification actions.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationActionConstants">
            <summary>
            Contains constant values for our notification trigger actions.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.FollowedProfileLive">
            <summary>
            A profile followed by the user has just gone live.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.InactiveUserMotivate">
            <summary>
            The user has been inactive on the app for a while.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.InactiveUnwatchedVlogs">
            <summary>
            There are many unwatched vlogs within the app for this user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.InactiveVlogRecordRequest">
            <summary>
            The user has not recorded a vlog for a certain amount of time.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.VlogGainedLikes">
            <summary>
            A users’ vlog has received many love it’s (likes).
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.VlogNewReaction">
            <summary>
            One or more reactions have been placed on a vlog that belongs to the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Notifications.NotificationActionConstants.VlogRecordRequest">
            <summary>
            Max. 3 times a day request to record a vlog.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationActionMapper">
            <summary>
            Maps between <see cref="T:Swabbr.Core.Notifications.NotificationAction"/> and string values of our
            <see cref="T:Swabbr.Core.Notifications.NotificationActionConstants"/> class.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationActionTranslator">
            <summary>
            Maps from <see cref="T:Swabbr.Core.Notifications.NotificationAction"/> to the corresponding string value.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationBuilder">
            <summary>
            Builds <see cref="T:Swabbr.Core.Notifications.SwabbrNotification"/>s for us.
            TODO Titles.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.NotificationTextData">
            <summary>
            Temporary way of distributing vlog title and message data.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Notifications.SwabbrNotification">
            <summary>
            Represents a single notification to be sent to a user.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Notifications.SwabbrNotification.#ctor(Swabbr.Core.Notifications.NotificationAction,Swabbr.Core.Notifications.JsonWrappers.ParametersJsonBase,System.String,System.String,System.String,System.String)">
            <summary>
            Constructor to force us to always initialize <see cref="T:Swabbr.Core.Notifications.NotificationAction"/>.
            </summary>
            <param name="notificationAction"><see cref="T:Swabbr.Core.Notifications.NotificationAction"/></param>
        </member>
        <member name="T:Swabbr.Core.Services.DeviceRegistrationService">
            <summary>
            Handles our device registrations for azure notification hub.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.DeviceRegistrationService.#ctor(Swabbr.Core.Interfaces.Clients.INotificationClient,Swabbr.Core.Interfaces.Repositories.INotificationRegistrationRepository)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.DeviceRegistrationService.RegisterOnlyThisDeviceAsync(System.Guid,Swabbr.Core.Enums.PushNotificationPlatform,System.String)">
            <summary>
            Registers a device and unregisters all previous registrations for
            the specified <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="platform"><see cref="T:Swabbr.Core.Enums.PushNotificationPlatform"/></param>
            <param name="handle">Device PNS handle</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.DeviceRegistrationService.UnregisterAsync(System.Guid)">
            <summary>
            Unregisters a device.
            </summary>
            <remarks>
            This throws an <see cref="T:Swabbr.Core.Exceptions.DeviceNotRegisteredException"/> if the device
            was never registered.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Swabbr.Core.Services.FollowRequestService">
            <summary>
            Contains functionality to handle <see cref="T:Swabbr.Core.Entities.FollowRequest"/> operations.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.#ctor(Swabbr.Core.Interfaces.Repositories.IFollowRequestRepository,Swabbr.Core.Interfaces.Repositories.IUserRepository,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.SendAsync(System.Guid,System.Guid)">
            <summary>
            Sends a <see cref="T:Swabbr.Core.Entities.FollowRequest"/>. If a previous one already exists
            between the sender and receiver and has been declined, the request will
            be sent again.
            </summary>
            <remarks>
            Any operations regarding user settings (being auto accept and/or 
            auto decline) are handled by our database.
            </remarks>
            <param name="requesterId">Requesting <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> internal id</param>
            <param name="receiverId">Receiving <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> internal id</param>
            <returns><see cref="T:Swabbr.Core.Entities.FollowRequest"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.AcceptAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Accepts a <see cref="T:Swabbr.Core.Entities.FollowRequest"/>.
            </summary>
            <param name="followRequestId"></param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.GetStatusAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Gets the <see cref="T:Swabbr.Core.Enums.FollowRequestStatus"/> for a <see cref="T:Swabbr.Core.Entities.FollowRequest"/>
            between two <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>s.
            </summary>
            <remarks>
            TODO Maybe a separate call for the repository to save processing power? Minor optimization
            </remarks>
            <param name="receiverId">Internal receiver id</param>
            <param name="requesterId">Internal requester id</param>
            <returns><see cref="T:Swabbr.Core.Enums.FollowRequestStatus"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.GetPendingIncomingForUserAsync(System.Guid)">
            <summary>
            Lists incoming <see cref="T:Swabbr.Core.Entities.FollowRequest"/>s.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.FollowRequest"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.GetPendingOutgoingForUserAsync(System.Guid)">
            <summary>
            Lists outgoing <see cref="T:Swabbr.Core.Entities.FollowRequest"/>s.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.FollowRequest"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.CancelAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Cancels a <see cref="T:Swabbr.Core.Entities.FollowRequest"/>.
            </summary>
            <remarks>
            The <paramref name="requesterId"/> is used to ensure that a user can 
            only cancel a <see cref="T:Swabbr.Core.Entities.FollowRequest"/> that he has requested himself.
            </remarks>
            <param name="followRequestId">Internal <see cref="T:Swabbr.Core.Entities.FollowRequest"/> id</param>
            <param name="requesterId">Internal requesting <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.FollowRequestService.UnfollowAsync(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Unfollows a user.
            </summary>
            <param name="receiverId">Internal receiver id</param>
            <param name="requesterId">Internal requester id</param>
            <returns></returns>
        </member>
        <member name="T:Swabbr.Core.Services.HashDebugDistributionService">
            <summary>
            TODO Debug remove
            This exists for testing purposes only.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Services.HashDebugEvenDistributionService">
            <summary>
            Returns the user each <see cref="F:Swabbr.Core.Services.HashDebugEvenDistributionService.MinutesInterval"/> minutes.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Services.HashDistributionService">
            <summary>
            Handles our hash distribution.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.HashDistributionService.#ctor(Microsoft.Extensions.Options.IOptions{Swabbr.Core.Configuration.SwabbrConfiguration})">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.HashDistributionService.GetForMinute(System.Collections.Generic.IEnumerable{Swabbr.Core.Entities.SwabbrUserMinified},System.DateTimeOffset,System.Nullable{System.TimeSpan})">
            <summary>
            Uses hash distribution to get all users which trigger in a given moment.
            </summary>
            <param name="users"><see cref="T:Swabbr.Core.Entities.SwabbrUserMinified"/></param>
            <param name="time"><see cref="T:System.DateTimeOffset"/></param>
            <param name="offset"><see cref="T:System.TimeSpan"/></param>
            <returns><see cref="T:Swabbr.Core.Entities.SwabbrUserMinified"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.HashDistributionService.GetHashMinute(Swabbr.Core.Entities.SwabbrUserMinified,System.DateTime,System.Int32)">
            <summary>
            Hashes a single <see cref="T:Swabbr.Core.Entities.SwabbrUserMinified"/> into a corresponding minute
            of the day, represented as <see cref="T:System.Int32"/> value.
            </summary>
            <remarks>
            This algorithm computes a Murmur3 hash of a composed string value which contains:
                - The user id
                - The day
                - The request index, ranging between 1 and the vlog request limit for that user
            The computed hash is then converted to a uint32. The resulting minute is computed
            by taking the <see cref="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogRequestStartTimeMinutes"/> plus
            the uint32 modulo <see cref="P:Swabbr.Core.Configuration.SwabbrConfiguration.VlogRequestEndTimeMinutes"/>.
            
            This ignores the <see cref="P:Swabbr.Core.Entities.SwabbrUserMinified.TimeZone"/> value.
            </remarks>
            <param name="user"><see cref="T:Swabbr.Core.Entities.SwabbrUserMinified"/></param>
            <param name="day"><see cref="T:System.DateTime"/></param>
            <param name="requestIndex">Index of the request on the day</param>
            <returns>The minute in the day based on the inputs</returns>
        </member>
        <member name="T:Swabbr.Core.Services.NotificationService">
            <summary>
            Contains functionality to handle notification operations.
            TODO This used to contain a circular dependency for the livestream service. Implement boundary checks here!
            TODO Single responsibility! Inconsistent atm
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.#ctor(Swabbr.Core.Interfaces.Repositories.IUserRepository,Swabbr.Core.Interfaces.Repositories.IVlogRepository,Swabbr.Core.Interfaces.Repositories.IVlogLikeRepository,Swabbr.Core.Interfaces.Clients.INotificationClient,Swabbr.Core.Interfaces.Repositories.INotificationRegistrationRepository,Swabbr.Core.Interfaces.Notifications.INotificationBuilder,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.NotifyFollowersProfileLiveAsync(System.Guid,System.Guid,Swabbr.Core.Notifications.JsonWrappers.ParametersFollowedProfileLive)">
            <summary>
            Sends a <see cref="T:Swabbr.Core.Notifications.SwabbrNotification"/> to each follower of the 
            specified <paramref name="userId"/>.
            </summary>
            <remarks>
            TODO This does no checking for the livestream state.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.NotifyFollowersVlogPostedAsync(System.Guid,System.Guid)">
            <summary>
            Notifies all <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> followers that a new
            <see cref="T:Swabbr.Core.Entities.Vlog"/> was posted.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.NotifyVlogRecordRequestAsync(System.Guid,System.Guid,Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog)">
            <summary>
            Sends a notification to a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> when we have decided
            that the user should start streaming.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.NotifyReactionPlacedAsync(System.Guid)">
            <summary>
            Notifies the owner of the vlog to which a reaction is placed that
            a reaction was placed.
            </summary>
            <param name="reactionId">Internal <see cref="T:Swabbr.Core.Entities.Reaction"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationService.NotifyVlogLikedAsync(Swabbr.Core.Types.VlogLikeId)">
            <summary>
            Notifies the owner of a <see cref="T:Swabbr.Core.Entities.Vlog"/> when someone likes the 
            <see cref="T:Swabbr.Core.Entities.Vlog"/>.
            </summary>
            <param name="vlogLikeId">Internal <see cref="T:Swabbr.Core.Entities.VlogLike"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Swabbr.Core.Services.NotificationTestingService">
            <summary>
            Used to test notifications.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.NotificationTestingService.#ctor(Swabbr.Core.Interfaces.Services.IUserService,Swabbr.Core.Interfaces.Clients.INotificationClient,Swabbr.Core.Interfaces.Notifications.INotificationBuilder)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Services.UserService">
            <summary>
            <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> service.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.#ctor(Swabbr.Core.Interfaces.Repositories.IUserRepository,Microsoft.Extensions.Options.IOptions{Swabbr.Core.Configuration.SwabbrConfiguration})">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetAllVloggableUserMinifiedAsync">
            <summary>
            Gets all vloggable users.
            </summary>
            <returns><see cref="T:Swabbr.Core.Entities.SwabbrUserMinified"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetFollowersAsync(System.Guid)">
            <summary>
            Get all followers for a <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.SwabbrUser"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetFollowingAsync(System.Guid)">
            <summary>
            Get all users that <paramref name="userId"/> is following.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.SwabbrUser"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetUserPushDetailsAsync(System.Guid)">
            <summary>
            Gets the notification details for a user.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Types.UserPushNotificationDetails"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetUserSettingsAsync(System.Guid)">
            <summary>
            Gets the <see cref="T:Swabbr.Core.Entities.UserSettings"/> for a <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.UserSettings"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.GetUserStatisticsAsync(System.Guid)">
            <summary>
            Gets the <see cref="T:Swabbr.Core.Entities.UserStatistics"/> for a user.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.UserStatistics"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.UpdateAsync(Swabbr.Core.Types.UserUpdateWrapper)">
            <summary>
            Updates a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
            <remarks>
            The <paramref name="wrapper"/> contains the nullable variant of the
            user properties. All null-values will not be stored in the data store.
            </remarks>
            <param name="wrapper"><see cref="T:Swabbr.Core.Types.UserUpdateWrapper"/></param>
            <returns>Updated <see cref="T:Swabbr.Core.Entities.SwabbrUser"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.UpdateLocationAsync(System.Guid,System.Double,System.Double)">
            <summary>
            Update the user location.
            </summary>
            <param name="userId"></param>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.UpdateSettingsAsync(Swabbr.Core.Entities.UserSettings)">
            <summary>
            Updates the <see cref="T:Swabbr.Core.Entities.UserSettings"/> for a <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserService.UpdateTimeZoneAsync(System.Guid,System.TimeZoneInfo)">
            <summary>
            Update the user timezone.
            </summary>
            <param name="userId"></param>
            <param name="newTimeZone"></param>
            <returns></returns>
        </member>
        <member name="T:Swabbr.Core.Services.UserStreamingHandlingService">
            <summary>
            This processes the requests that a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> sends to our
            backend when he or she starts or stops livestreaming (or is about to).
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.#ctor(Swabbr.Core.Interfaces.Services.ILivestreamService,Swabbr.Core.Interfaces.Services.IPlaybackService,Swabbr.Core.Interfaces.Services.INotificationService,Swabbr.Core.Interfaces.Repositories.IUserRepository,Swabbr.Core.Interfaces.Repositories.ILivestreamRepository,Swabbr.Core.Interfaces.Services.IVlogService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Swabbr.Core.Configuration.LogicAppsConfiguration},Microsoft.Extensions.Options.IOptions{Swabbr.Core.Configuration.SwabbrConfiguration},Swabbr.Core.Interfaces.Factories.IHttpClientFactory)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserConnectedToLivestreamAsync(System.Guid,System.Guid)">
            <summary>
            Called when the user connected to the <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserDisconnectedFromLivestreamAsync(System.Guid,System.Guid)">
            <summary>
            Called when the user disconnected from the <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
            <remarks>
            This does nothing if the livestream is not in state <see cref="F:Swabbr.Core.Enums.LivestreamState.Live"/>.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserNeverConnectedCheckAsync(System.Guid,System.Guid)">
            <summary>
            Fires after the timeout for user connecting, after the user told the
            backend he would start streaming.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserStartStreaming(System.Guid,System.Guid)">
            <summary>
            Called when the user starts streaming to a <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            This creates a <see cref="T:Swabbr.Core.Entities.Vlog"/> to bind to the stream.
            </summary>
            <remarks>
            This should be called BEFORE the actual streaming itself.
            This does NOT notify us if a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> doesn't exist,
            this relation exists implicitly.
            
            TODO This is coupled with Azure Logic Apps.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:Swabbr.Core.Types.LivestreamUpstreamDetails"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserStopStreaming(System.Guid,System.Guid)">
            <summary>
            Gets called when the user stops streaming.
            </summary>
            <remarks>
            This should be called AFTER the user has stopped streaming.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.UserStreamingHandlingService.OnUserVlogTimeExpiredAsync(System.Guid,System.Guid)">
            <summary>
            Called when the user vlog time has expired.
            </summary>
            <remarks>
            This gets called even when the user has alreayd stopped vlogging.
            In this case, the function will just exit gracefully. This will only
            process if the livestream is in state <see cref="F:Swabbr.Core.Enums.LivestreamState.PendingUserConnect"/>.
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Swabbr.Core.Services.UserWithStatsService">
            <summary>
            Service for <see cref="T:Swabbr.Core.Entities.SwabbrUserWithStats"/> related operations.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserWithStatsService.#ctor(Swabbr.Core.Interfaces.Repositories.IUserWithStatsRepository)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.UserWithStatsService.GetFromIdsAsync(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Gets a collection of <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>s based on a collection
            of ids.
            </summary>
            <param name="userIds">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> ids</param>
            <returns><see cref="T:Swabbr.Core.Entities.SwabbrUserWithStats"/> collection</returns>
        </member>
        <member name="T:Swabbr.Core.Services.VlogService">
            <summary>
            Contains request processing functionality for <see cref="T:Swabbr.Core.Entities.Vlog"/>s and
            <see cref="T:Swabbr.Core.Entities.VlogLike"/>s.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.#ctor(Swabbr.Core.Interfaces.Repositories.IVlogRepository,Swabbr.Core.Interfaces.Repositories.IVlogLikeRepository,Swabbr.Core.Interfaces.Repositories.IUserRepository,Swabbr.Core.Interfaces.Services.INotificationService,Swabbr.Core.Interfaces.Services.IStorageService)">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.AddView(System.Guid)">
            <summary>
            Adds a single view to a <see cref="T:Swabbr.Core.Entities.Vlog"/>.
            </summary>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.DeleteAsync(System.Guid,System.Guid)">
            <summary>
            Soft deletes a <see cref="T:Swabbr.Core.Entities.Vlog"/> in our data store.
            </summary>
            <remarks>
            Throws a <see cref="T:Swabbr.Core.Exceptions.UserNotOwnerException"/> if our <paramref name="userId"/>
            does not own the <paramref name="vlogId"/>.
            </remarks>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.GetAsync(System.Guid)">
            <summary>
            Gets a <see cref="T:Swabbr.Core.Entities.Vlog"/> from our data store.
            </summary>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.Vlog"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.GetVlogLikesForVlogAsync(System.Guid)">
            <summary>
            Gets all <see cref="T:Swabbr.Core.Entities.VlogLike"/> entities that belong to a given
            <see cref="T:Swabbr.Core.Entities.Vlog"/>.
            </summary>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.VlogLike"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.LikeAsync(System.Guid,System.Guid)">
            <summary>
            Creates a <see cref="T:Swabbr.Core.Entities.VlogLike"/> between a <see cref="T:Swabbr.Core.Entities.Vlog"/>
            and a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
            <remarks>
            Throws an <see cref="T:Swabbr.Core.Exceptions.OperationAlreadyExecutedException"/> if the user
            already liked the vlog.
            
            Throws an <see cref="T:Swabbr.Core.Exceptions.NotAllowedException"/> if the user owns the vlog.
            </remarks>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.GetVlogsFromUserAsync(System.Guid)">
            <summary>
            Lists all <see cref="T:Swabbr.Core.Entities.Vlog"/> entities that are owned by a given
            <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.Vlog"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.UnlikeAsync(System.Guid,System.Guid)">
            <summary>
            Unlikes a <see cref="T:Swabbr.Core.Entities.Vlog"/> by deleting the corresponding 
            <see cref="T:Swabbr.Core.Entities.VlogLike"/>.
            </summary>
            <remarks>
            
            </remarks>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.UpdateAsync(System.Guid,System.Guid,System.Boolean)">
            <summary>
            Updates a <see cref="T:Swabbr.Core.Entities.Vlog"/> in our data store.
            TODO Is this optimal?
            </summary>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns>Updated and queried <see cref="T:Swabbr.Core.Entities.Vlog"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.ExistsAsync(System.Guid)">
            <summary>
            Checks if a <see cref="T:Swabbr.Core.Entities.Vlog"/> exists or not.
            </summary>
            <param name="vlogId">Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id</param>
            <returns>Boolean result</returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.GetRecommendedForUserAsync(System.Guid,System.UInt32)">
            <summary>
            Gets a collection of recommended <see cref="T:Swabbr.Core.Entities.Vlog"/>s for a given
            <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <param name="maxCount">Maximum result count</param>
            <returns><see cref="T:Swabbr.Core.Entities.Vlog"/> collection</returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogService.GetVlogFromLivestreamAsync(System.Guid)">
            <summary>
            Gets a <see cref="T:Swabbr.Core.Entities.Vlog"/> that belongs to a <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
            <remarks>
            This returns <see cref="T:Swabbr.Core.Exceptions.EntityNotFoundException"/> if no <see cref="T:Swabbr.Core.Entities.Vlog"/>
            is currently bound to the specified <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </remarks>
            <param name="livestreamId">Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id</param>
            <returns><see cref="T:Swabbr.Core.Entities.Vlog"/></returns>
        </member>
        <member name="T:Swabbr.Core.Services.VlogTriggerService">
            <summary>
            Handles the triggers where a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> has to start vlogging.
            This fires the AMS livestream services and the ANH notification services:
            - <see cref="T:Swabbr.Core.Interfaces.Services.ILivestreamService"/>
            - <see cref="T:Swabbr.Core.Interfaces.Services.INotificationService"/>
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.VlogTriggerService.#ctor(Swabbr.Core.Interfaces.Services.ILivestreamService,Swabbr.Core.Interfaces.Services.IUserService,Swabbr.Core.Interfaces.Services.IHashDistributionService,Swabbr.Core.Interfaces.Services.INotificationService,Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Options.IOptions{Swabbr.Core.Configuration.SwabbrConfiguration})">
            <summary>
            Constructor for dependency injection.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Services.VlogTriggerService.ProcessVlogTriggerForUserAsync(System.Guid,System.DateTimeOffset)">
            <summary>
            Process the external trigger that a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> has to start
            vlogging.
            </summary>
            <remarks>
            TODO This should poll after the request was received, and only then start the timer (not for version 1)
            </remarks>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="M:Swabbr.Core.Services.VlogTriggerService.ProcessVlogTimeoutForUserAsync(System.Guid,System.DateTimeOffset)">
            <summary>
            Processes the timeout for a vlog request for a <paramref name="userId"/>.
            </summary>
            <param name="userId">Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id</param>
            <returns><see cref="T:System.Threading.Tasks.Task"/></returns>
        </member>
        <member name="T:Swabbr.Core.Types.FollowRequestId">
            <summary>
            Functions as the primary key for a follow request.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.FollowRequestId.RequesterId">
            <summary>
            Id of the requesting user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.FollowRequestId.ReceiverId">
            <summary>
            Id of the receiving user.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.LivestreamConnectionDetails">
            <summary>
            Contains all details for a given livestream connection.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.ExternalId">
            <summary>
            External id of the livestream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.HostAddress">
            <summary>
            Address of the host.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.AppName">
            <summary>
            Streaming application name.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.StreamName">
            <summary>
            Name of the stream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.Port">
            <summary>
            Port number.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.Username">
            <summary>
            Username to be used for authenticating the connection.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamConnectionDetails.Password">
            <summary>
            Password to be used for authenticating the connection.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.LivestreamDownstreamDetails">
            <summary>
            Represents the playback details for a single livestream.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamDownstreamDetails.LiveUserId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id of the person that is
            live.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamDownstreamDetails.LiveLivestreamId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Livestream"/> id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamDownstreamDetails.LiveVlogId">
            <summary>
            Internal <see cref="T:Swabbr.Core.Entities.Vlog"/> id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamDownstreamDetails.EndpointUrl">
            <summary>
            Endpoint to connect to.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamDownstreamDetails.Token">
            <summary>
            Authentication token.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.LivestreamTimeoutWrapper">
            <summary>
            Wrapper object that contains information about a livestream timeout.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.LivestreamUpstreamDetails">
            <summary>
            Contains upstream details for a <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.VlogId">
            <summary>
            References the <see cref="T:Swabbr.Core.Entities.Vlog"/> that belongs 
            to the current <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.LivestreamId">
            <summary>
            References the <see cref="T:Swabbr.Core.Entities.Livestream"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.HostServer">
            <summary>
            Upstream endpoint url.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.HostPort">
            <summary>
            Upstream endpoint port.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.ApplicationName">
            <summary>
            Upstream endpoint application name.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.StreamKey">
            <summary>
            Upstream stream key.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.Username">
            <summary>
            Upstream authentication username.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.LivestreamUpstreamDetails.Password">
            <summary>
            Upstream authentication password.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.ReactionPlaybackDetails">
            <summary>
            Contains the details we need to playback a <see cref="T:Swabbr.Core.Entities.Reaction"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.ReactionUploadWrapper">
            <summary>
            Wrapper for uploading a <see cref="P:Swabbr.Core.Types.ReactionUploadWrapper.Reaction"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.StreamWithEntityIdWrapper">
            <summary>
            Wrapper for a <see cref="P:Swabbr.Core.Types.StreamWithEntityIdWrapper.Stream"/> and a <see cref="T:System.Guid"/> of an
            <see cref="!:Entity"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.UserPushNotificationDetails">
            <summary>
            Composite class that contains a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> id 
            along with the <see cref="T:Swabbr.Core.Entities.NotificationRegistration"/> platform.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.UserStartStreamingWrapper">
            <summary>
            JSON wrapper for a user-start-streaming request.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.UserUpdateWrapper">
            <summary>
            Contains all (mostly nullable) properties for updating a <see cref="T:Swabbr.Core.Entities.SwabbrUser"/>.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.UserId">
            <summary>
            Represents the <see cref="T:Swabbr.Core.Entities.SwabbrUser"/> internal id.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.FirstName">
            <summary>
            First name of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.LastName">
            <summary>
            Surname of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.Gender">
            <summary>
            Selected gender of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.Country">
            <summary>
            Selected country.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.BirthDate">
            <summary>
            Date of birth for the given user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.Nickname">
            <summary>
            Nickname to display for the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.ProfileImageBase64Encoded">
            <summary>
            Base64 encoded string containing the uploaded profile image of the user.
            </summary>
        </member>
        <member name="P:Swabbr.Core.Types.UserUpdateWrapper.IsPrivate">
            <summary>
            Indicates whether the profile of the user is publicly visible to other users.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.VlogLikeId">
            <summary>
            Contains the primary key information for a <see cref="T:Swabbr.Core.Entities.VlogLike"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Types.VlogPlaybackDetails">
            <summary>
            Contains the details we need to playback a <see cref="T:Swabbr.Core.Entities.Vlog"/>.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Utility.DateTimeOffsetExtensions">
            <summary>
            Contains extension functionality for <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.DateTimeOffsetExtensions.ThrowIfNullOrEmpty(System.DateTimeOffset)">
            <summary>
            TODO Implement
            </summary>
            <param name="self">This <see cref="T:System.DateTimeOffset"/></param>
        </member>
        <member name="M:Swabbr.Core.Utility.DateTimeOffsetExtensions.IsNullOrEmpty(System.DateTimeOffset)">
            <summary>
            TODO Implement.
            </summary>
            <param name="self">This <see cref="T:System.DateTimeOffset"/></param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="T:Swabbr.Core.Utility.FollowRequestIdExtensions">
            <summary>
            Contains extensions for the <see cref="T:Swabbr.Core.Types.FollowRequestId"/> class.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.FollowRequestIdExtensions.ThrowIfNullOrEmpty(Swabbr.Core.Types.FollowRequestId)">
            <summary>
            Checks if a <paramref name="id"/> object is null or contains any
            null or empty <see cref="T:System.Guid"/>s. This will throw if any of these 
            items is null or empty.
            </summary>
            <param name="id"><see cref="T:Swabbr.Core.Types.FollowRequestId"/></param>
        </member>
        <member name="T:Swabbr.Core.Utility.LivestreamTimeoutWrapperExtensions">
            <summary>
            Contains extension functionality for <see cref="T:Swabbr.Core.Types.LivestreamTimeoutWrapper"/>.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.LivestreamTimeoutWrapperExtensions.ThrowIfInvalid(Swabbr.Core.Types.LivestreamTimeoutWrapper)">
            <summary>
            Throws if a <paramref name="wrapper"/> is <see cref="!:null"/> or contains
            incomplete information.
            </summary>
            <param name="wrapper"><see cref="T:Swabbr.Core.Types.LivestreamTimeoutWrapper"/></param>
        </member>
        <member name="T:Swabbr.Core.Utility.LogicAppsConfigurationExtensions">
            <summary>
            Contains extension functionality for <see cref="T:Swabbr.Core.Configuration.LogicAppsConfiguration"/>.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.LogicAppsConfigurationExtensions.ThrowIfInvalid(Swabbr.Core.Configuration.LogicAppsConfiguration)">
            <summary>
            Throws if invalid.
            </summary>
            <param name="config"><see cref="T:Swabbr.Core.Configuration.LogicAppsConfiguration"/></param>
        </member>
        <member name="T:Swabbr.Core.Utility.NotificationRegistrationExtensions">
            <summary>
            Contains extensions functionality for the <see cref="T:Swabbr.Core.Entities.NotificationRegistration"/> class.
            </summary>
        </member>
        <member name="T:Swabbr.Core.Utility.ParametersRecordVlogExtensions">
            <summary>
            Contains extension functionality for the <see cref="T:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog"/>
            class.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.ParametersRecordVlogExtensions.Validate(Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog)">
            <summary>
            Throws an <see cref="T:System.ArgumentNullException"/> if any fields are missing.
            </summary>
            <param name="pars"><see cref="T:Swabbr.Core.Notifications.JsonWrappers.ParametersRecordVlog"/></param>
        </member>
        <member name="T:Swabbr.Core.Utility.ProfileImageBase64Checker">
            <summary>
            Contains functionality to validate a base64 encoded profile image string.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.ProfileImageBase64Checker.IsValid(System.String)">
            <summary>
            TODO Update
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Swabbr.Core.Utility.SwabbrConfigurationExtensions.ThrowIfInvalid(Swabbr.Core.Configuration.SwabbrConfiguration)">
            <summary>
            Validates a <see cref="T:Swabbr.Core.Configuration.SwabbrConfiguration"/>.
            TODO These values are defaulted to 0, which doesn't always trigger an exception.
            </summary>
            <param name="config"><see cref="T:Swabbr.Core.Configuration.SwabbrConfiguration"/></param>
        </member>
        <member name="T:Swabbr.Core.Utility.SwabbrNotificationExtensions">
            <summary>
            Contains extension functionality for <see cref="T:Swabbr.Core.Notifications.SwabbrNotification"/>.
            </summary>
        </member>
        <member name="M:Swabbr.Core.Utility.SwabbrNotificationExtensions.ThrowIfInvalid(Swabbr.Core.Notifications.SwabbrNotification)">
            <summary>
            Throws if the given <paramref name="wrapper"/> is invalid.
            </summary>
            <param name="wrapper"></param>
        </member>
    </members>
</doc>
